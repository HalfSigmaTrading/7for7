//@version=6
// NQ 1 min scalping - 7 for 7 winners strategy
// From Quant Trade Edge
// https://www.youtube.com/watch?v=lhW5czmfc14 and https://www.youtube.com/watch?v=6Ve20SIXURM
strategy("NQ 1 min scalping - 7 for 7 winners - V1", overlay=true, initial_capital=20000, default_qty_type=strategy.fixed, default_qty_value=2, margin_long=0, margin_short=0)

// Inputs
heures_trading = input.string("0300-1530", "Heures de trading NY EST", group="Time Filter")
d_monday        = input.bool(title="Monday", defval=true, group="Time Filter", tooltip="Take trades on this day?", inline="days")
d_tuesday       = input.bool(title="Tuesday", defval=true, group="Time Filter", tooltip="Take trades on this day?", inline="days")
d_wednesday     = input.bool(title="Wednesday", defval=true, group="Time Filter", tooltip="Take trades on this day?", inline="days")
d_thursday      = input.bool(title="Thursday", defval=true, group="Time Filter", tooltip="Take trades on this day?", inline="days")
d_friday        = input.bool(title="Friday", defval=true, group="Time Filter", tooltip="Take trades on this day?", inline="days")
longs_allowed = input.bool(true, "LONGs allowed", group="Type of positions")
shorts_allowed =input.bool(true, "SHORTs allowed", group="Type of positions")
atrPeriod = input.int(title='ATR Period', defval=10, group="Algo configuration")
atrTarget = input.float(title='Target = ATR x', defval=0.5, group="Algo configuration")
ATRminimum= input.int(title='ATR minimum value for moving market', defval=8, group="Algo configuration")
ATRmaximum= input.int(title='ATR maximum value for moving market', defval=50, group="Algo configuration")
emaPeriod = input.int(title='EMA Period', defval=10, group="Algo configuration")
drawRWR = input.bool(true, "Show SL and TP on chart", group="Graphics")

win_rate_input     = input.float(0.55, "Win Rate", minval=0.0, maxval=1.0)
reward_risk_ratio  = input.float(1.5, "Reward-to-Risk Ratio", minval=0.01, tooltip="the average win relative to the average loss")
// === FUNCTION: KELLY CALCULATION ===
kelly_fraction(winrate, rr) =>
    loss_rate = 1.0 - winrate
    edge = (winrate * rr - loss_rate)
    kelly = edge / rr
    math.max(kelly, 0.0)  // Prevent negative sizing

// === COMPUTE KELLY FRACTION ===
kelly_size = kelly_fraction(win_rate_input, reward_risk_ratio)
max_risk = kelly_size * strategy.equity


// InSession() determines if a price bar falls inside the specified session (and day)
days = d_monday ? "2" : ""
days := days + (d_tuesday ? "3" : "")
days := days + (d_wednesday ? "4" : "")
days := days + (d_thursday ? "5" : "")
days := days + (d_friday ? "6" : "")

// Restriction des heures de trading
inKillzone = not na(time(timeframe.period, heures_trading + ":" + days, "America/New_York"))

// Vérifier qu'aucun trade n'est en cours
noTrade = strategy.position_size == 0

// Compute indicators
var bool pending_order = false
ema = ta.ema(ohlc4, emaPeriod)
atr = ta.atr(atrPeriod)
high_atr_market = (atr >= ATRminimum) and (atr <= ATRmaximum)
body_bar = math.abs(open-close)/math.abs(high-low) >= 0.5

// Conditions pour un scénario --> SHORT
bullish_c1 = close[1] > open[1]
bearish_c0 = close < open and high > high[1] and body_bar
under_ema = (close < ema) and (open < ema)
shortSL = high
shortTP = low - math.round_to_mintick(atr * atrTarget)
shortEntry = bullish_c1 and bearish_c0 and under_ema and noTrade and shorts_allowed and high_atr_market

// Conditions pour un scénario BEARISH -> LONG
bearish_c1 = close[1] < open[1]
bullish_c0 = close > open and low < low[1] and body_bar
over_ema = (close > ema) and (open > ema)
longSL = low
longTP = high + math.round_to_mintick(atr * atrTarget)
longEntry = bullish_c0 and bearish_c1 and over_ema and noTrade and longs_allowed and high_atr_market

// TradingView alerts variables
//    - plot_0 is Entry Price
//    - plot_1 is the Take Profit
//    - plot_2 is the Stop Loss
var float TP_to_show = 0
var float SL_to_show = 0
var float entryPrice = 0
if not pending_order
    if shortEntry
        TP_to_show := shortTP
        SL_to_show := shortSL
        entryPrice := low
    else if longEntry
        TP_to_show := longTP
        SL_to_show := longSL
        entryPrice := high

// Placer les ordres
if shortEntry and inKillzone and not pending_order
    strategy.entry("Short", strategy.short, qty=2, stop=entryPrice)
    strategy.exit("Short Exit", from_entry="Short", stop=SL_to_show, limit=TP_to_show)
    pending_order := true
    if drawRWR // Stop Zone (Red) and Target Zone (Green)
        box.new(left=bar_index, right=bar_index + 3, top=SL_to_show, bottom=entryPrice, border_color=color.red, bgcolor=color.new(color.red, 80), text="SL: " + str.tostring(SL_to_show-entryPrice), text_size = size.small, text_halign = text.align_right, text_valign = text.align_top)
        box.new(left=bar_index, right=bar_index + 3, top=entryPrice, bottom=TP_to_show, border_color=color.green, bgcolor=color.new(color.green, 80))

if longEntry and inKillzone and not pending_order
    strategy.entry("Long", strategy.long, qty=2, stop=entryPrice)
    strategy.exit("Long Exit", from_entry="Long", stop=SL_to_show, limit=TP_to_show)
    pending_order := true
    if drawRWR // Stop Zone (Red) and Target Zone (Green)
        box.new(left=bar_index, right=bar_index + 3, top=entryPrice, bottom=SL_to_show, border_color=color.red, bgcolor=color.new(color.red, 80), text="SL: " + str.tostring(entryPrice-SL_to_show), text_size = size.small, text_halign = text.align_right, text_valign = text.align_bottom)
        box.new(left=bar_index, right=bar_index + 3, top=TP_to_show, bottom=entryPrice, border_color=color.green, bgcolor=color.new(color.green, 80))

var int entryTime = 0
var int exitTime = 0
var bool long = false
// Traitement spécifique à l'ouverture de la position
if (strategy.position_size[1] == 0) and (strategy.position_size != 0)
    entryTime := time
    pending_order := false

// ta.lowest ne fonctionne pas dans le scope du if suivant. Donc on le fait à l'extérieur
duree_ref    = math.max(math.min((time - entryTime)/ (1000 * 60) +1, 15000),1)
widest_bar   = ta.highest(high - low, duree_ref)
lowest_low   = ta.lowest(duree_ref)
highest_high = ta.highest(duree_ref)
avgRange     = ta.sma(math.abs(close - open), 5)

// Traitement spécifique à la fermeture de la position
if (strategy.position_size[1] != 0) and (strategy.position_size == 0)
    // trade just closed
    exitTime := time
    long := entryPrice < TP_to_show
    
    // Calcul durée du trade
    tradeduration_min = (exitTime - entryTime)/ (1000 * 60) + 1
    infos = "Duration: " + str.tostring(tradeduration_min) + " min\n"

    // Calcul Heat pendant le trade
    var float heat = 0
    if long
        heat := entryPrice - lowest_low
    else
        heat :=  highest_high - entryPrice
    infos := infos + "Heat: " + str.tostring(heat) + " hdls\n"

    // Calcul de la biggest bar
    infos := infos + "Max cdl rng: " + str.tostring(widest_bar)  + " hdls"
    
    // affichage des infos sur le trade
    label.new(bar_index-tradeduration_min/2, lowest_low - 50, text=infos, color=color.blue, textcolor=color.white, style=label.style_label_up)

    // Clean the plots
    TP_to_show := 0
    SL_to_show := 0
    entryPrice := 0

// Cancels pending order if TP or SL reached
if pending_order and noTrade
    if (entryPrice > TP_to_show) and ((low < TP_to_show) or (high > SL_to_show))
        strategy.cancel_all()
        // label.new(bar_index, low - 1, text="Cancel", color=color.blue, textcolor=color.white, style=label.style_label_up)
        pending_order := false
    else if (entryPrice < TP_to_show) and ((high > TP_to_show) or (low < SL_to_show))
        strategy.cancel_all()
        // label.new(bar_index, high + 1, text="Cancel", color=color.blue, textcolor=color.white, style=label.style_label_down)
        pending_order := false

// 1 min SL trailing
if (strategy.position_size != 0)
    if entryPrice < TP_to_show
        SL_to_show := low
        strategy.exit("Long Exit", from_entry="Long", stop= SL_to_show, limit=TP_to_show)
    else
        SL_to_show := high
        strategy.exit("Short Exit", from_entry="Short", stop=SL_to_show, limit=TP_to_show)


// plots
plot(entryPrice, title="Entry Price", color = color.new(color.white, 20), display = display.status_line)
plot(TP_to_show, title="Take Profit", color = color.new(color.white, 20), display = display.status_line)
plot(SL_to_show, title="Stop Loss", color = color.new(color.white, 20), display = display.status_line)

plot (ema)


// Plot current position
bgcolor(strategy.position_size > 0 ? color.new(color.blue, 90) : strategy.position_size < 0 ? color.new(color.blue, 90) : na)
